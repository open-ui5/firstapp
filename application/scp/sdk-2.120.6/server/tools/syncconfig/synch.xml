<project name="synchronize configuration" default="all" xmlns:ac="antlib:net.sf.antcontrib" basedir=".">

	<property file="config.properties" prefix="cp"/>

	<!-- create backup of current configuration  -->
	<target name="config-backup" description="Backup config folder">
		<copy  todir="${cp.config.local.backup}" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="${cp.config.local}"/>
		</copy>

		<mkdir dir="${cp.config.local.e_sourcing.home.folder}"/> <!-- if the e-sourcing home folder does not exist it is created -->

		<copy  todir="${cp.config.local.e_sourcing.backup}" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="${cp.config.local.e_sourcing.home.folder}"/>
		</copy>
	</target>

	<target name="copy-config" description="Copy files from the central share" depends="config-backup">

		<echo message="Copy configuration from the share ${cp.config.share} to ${cp.config.local}.tmp..." />
		<mkdir dir="${cp.config.local}.tmp"/>

		<copy  todir="${cp.config.local}.tmp" verbose="true" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="${cp.config.share}${cp.config.master.inactive}"/>
		</copy>

		<mkdir dir="${cp.config.local.e_sourcing.home.folder}.tmp"/>

		<copy  todir="${cp.config.local.e_sourcing.home.folder}.tmp" verbose="true" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="${cp.config.share}${cp.config.e_sourcing.home.folder}"/>
		</copy>

		<!-- copy node.properties and template.properties from the central configuration -->
		<!-- they are used below in the script -->
		<copy file="${cp.config.share}${cp.node.properties.folder}${cp.node.properties.file}" todir="." overwrite="true"/>
		<copy file="${cp.config.share}${cp.template.properties}" todir="." overwrite="true"/>

	</target>

	<target name="replace-config" description="replace config folder with the copied from the central share" depends="copy-config">
		<delete dir="${cp.config.local}" quiet="true"/> 
		<copy todir="${cp.config.local}" overwrite="true" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="${cp.config.local}.tmp"/>
		</copy>

		<delete dir="${cp.config.local.e_sourcing.home.folder}" quiet="true"/> 
		<copy todir="${cp.config.local.e_sourcing.home.folder}" overwrite="true" includeEmptyDirs="true" preservelastmodified="true">
			<fileset dir="${cp.config.local.e_sourcing.home.folder}.tmp"/>
		</copy>

		<echo message="Copy file: ${cp.config.share}${cp.config.master.inactive}/../bundles.info to dir: ${cp.config.bundles}"/>
		<copy file="${cp.config.share}${cp.config.master.inactive}/../../bundles.info" todir="${cp.config.bundles}" overwrite="true"/>
	</target>

	

	<target name="replace-variables-in-configuration" description="Replace variables in the templates copied from the central share" depends="replace-config">
		<property file="${cp.node.properties.file}" prefix="node"/>
		<!-- Replace command port and jmx port -->
		 <echo message="replace ports in ljs.properties ..." />
		 <echo message="ljs.command.port=${node.ljs.command.port}, jmxremote.port=${node.jmxremote.port}" />
		  <copy file="${cp.config.local}.tmp/com.sap.ljs.commandline.parameters/ljs.properties"
			tofile="${cp.config.local}/com.sap.ljs.commandline.parameters/ljs.properties" overwrite="true">
			  <filterchain>
				  <replacetokens>
					  <token key="ljs.command.port"
						 value="${node.ljs.command.port}"/>
					  <token key="jmxremote.port"
						 value="${node.jmxremote.port}"/>			   
				  </replacetokens>
			  </filterchain>
		  </copy>

		<!-- Replace http port -->
		<echo message="replace tomcat ports..." />
	    <copy file="${cp.config.local}.tmp/com.springsource.osgi.webcontainer.tomcat/default-server.xml"
		 tofile="${cp.config.local}/com.springsource.osgi.webcontainer.tomcat/default-server.xml" overwrite="true">
			<filterchain>
				   <replacetokens>
					   <token key="tomcatport"
							  value="${node.tomcatport}"/>
				   </replacetokens>
			</filterchain>
		 </copy>

		<!-- Replace properties in fcilocal.properties -->
		<ac:if>
				<available file="${cp.config.local.e_sourcing.home.folder}.tmp/config/fcilocal.properties"/>
				<ac:then>
					 <echo message="${cp.config.local.e_sourcing.home.folder}.tmp/config/fcilocal.properties was found successfully" />
					   <copy file="${cp.config.local.e_sourcing.home.folder}.tmp/config/fcilocal.properties"
						 tofile="${cp.config.local.e_sourcing.home.folder}/config/fcilocal.properties" overwrite="true">
						   <filterchain>
							   <replacetokens>
								   <token key="host.instance.name"
									  value="${node.host.instance.name}"/>
								   <token key="username"
									  value="${node.username}"/>
								   <token key="system.daemons.events.listen.port"
									  value="${node.system.daemons.events.listen.port}"/>
							   </replacetokens>
						   </filterchain>
					   </copy>
				</ac:then>
				<ac:else>
					 <echo message="File ${cp.config.local.e_sourcing.home.folder}.tmp/config/fcilocal.properties is not available!" />
				</ac:else>
		</ac:if>
	</target>

	
	<target name="copy-war-file" description="copy the war file under pickup directory">
			<property file="template.properties" prefix="temp"/>
			<echo message="The following war files will be copied: ${temp.war_files}"/>
			<copy todir="${cp.config.local.apps.folder}" overwrite="true">
				<fileset dir="${cp.config.share}${cp.config.apps.folder}" includes="${temp.war_files}"/>
			</copy>
	</target>

	<target name="clean-up" description="Remove .tmp folders and file node.properties" depends="replace-variables-in-configuration,copy-war-file">
		<delete dir="${cp.config.local}.tmp" quiet="true"/>
		<delete dir="${cp.config.local.e_sourcing.home.folder}.tmp" quiet="true"/>
		<delete file="${cp.node.properties.file}" quiet="true"/>
		<delete file="template.properties" quiet="true"/>
	</target>

<property name="src.dir" location="."/>
<property name="target.dir" location="../.."/>

<target name="substitution" description="substitute values for symbolic names in template files">
    <property file="buildgo.properties" prefix="bgp"/>
    <fail unless="bgp.SUBSTITUTE_FILE"
        message="Property SUBSTITUTE_FILE not set in buildgo.properties"/>
    
	<property name="substitution.file" location="${bgp.SUBSTITUTE_FILE}"/>
    <echo message="Replacing with substitution file: ${substitution.file}"/>		
    <property file="${substitution.file}" prefix="s"/>

	<!-- make a backup of the original props.ini file -->
	<ac:if>
		<available file="${target.dir}/props.ini"/>
		<ac:then>
			<echo message="make backup of the script file ${target.dir}/props.ini.bak"/>
			<copy file="${target.dir}/props.ini" tofile="${target.dir}/props.ini.bak"/>
		</ac:then>
	</ac:if>

	<!-- replace variables in props.ini.t file and copy the result in LJS home folder -->
	<copy file="${src.dir}/props.ini.t" tofile="${target.dir}/props.ini" overwrite="true">
		<filterchain>
			<replacetokens>
				<token key="Xms" value="${s.Xms}"/>
				<token key="Xmx" value="${s.Xmx}"/>
				<token key="XXPermSize" value="${s.XXPermSize}"/>
				<token key="XXMaxPermSize" value="${s.XXMaxPermSize}"/>
				<token key="jmxremote.port" value="${s.jmxremote.port}"/>
				<token key="jmxremote.authenticate" value="${s.jmxremote.authenticate}"/>
				<token key="jmxremote.ssl" value="${s.jmxremote.ssl}"/>
				<token key="osgi.requiredJavaVersion" value="${s.osgi.requiredJavaVersion}"/>
				<token key="ljs.command.port" value="${s.ljs.command.port}"/>
			</replacetokens>
		</filterchain>
	</copy>
</target>
	<!--property name="LJS_OPTS" 
		value="${s.Xms} ${s.Xmx} -XX:PermSize=${s.XXPermSize} -XX:MaxPermSize=${s.XXMaxPermSize} -Dcom.sun.management.jmxremote.port=${s.jmxremote.port} -Dcom.sun.management.jmxremote.authenticate=${s.jmxremote.authenticate} -Dcom.sun.management.jmxremote.ssl=${s.jmxremote.ssl} ${s.osgi.requiredJavaVersion} -Dljs.command.port=${s.ljs.command.port}"/>
	<echo message="options: ${LJS_OPTS}"/>

	<copy file="${src.dir}/go.sh.t"
             tofile="${src.dir}/go.sh">
        <filterchain>
               <replacetokens>
                   <token key="LJS_OPTS"
                          value="${LJS_OPTS}"/>
               </replacetokens>
			   <fixcrlf eol="unix" eof="remove" />
        </filterchain>
    </copy>
  	<ac:if>
  		<available file="${target.dir}/go.sh"/>
	  	<ac:then>
			<echo message="make backup of the script file ${target.dir}/go.sh.bak"/>
		    <copy file="${target.dir}/go.sh"
		             tofile="${target.dir}/go.sh.bak">
			</copy>
  		</ac:then>
  	</ac:if>
	<echo message="copy script file to its destination ${target.dir}"/>
    <copy file="${src.dir}/go.sh"
             todir="${target.dir}" overwrite="true">
	</copy>
	
	<delete file="${src.dir}/go.sh" quiet="true"/>
    
	<copy file="${src.dir}/go.bat.t"
             tofile="${src.dir}/go.bat">
        <filterchain>
               <replacetokens>
                   <token key="LJS_OPTS"
                          value="${LJS_OPTS}"/>
               </replacetokens>
			   <fixcrlf eol="dos" eof="asis"/>
        </filterchain>
    </copy>
  	<ac:if>
  		<available file="${target.dir}/go.bat"/>
	  	<ac:then>
			<echo message="make backup of the script file ${target.dir}/go.bat.bak"/>
		    <copy file="${target.dir}/go.bat"
		             tofile="${target.dir}/go.bat.bak">
			</copy>
	  	</ac:then>
  	</ac:if>
	
	<echo message="copy script file to its destination ${target.dir}"/>
    <copy file="${src.dir}/go.bat"
             todir="${target.dir}" overwrite="true">
	</copy>
	
	<delete file="${src.dir}/go.bat" quiet="true"/>
  </target-->
  
  	<!-- Run all the targets -->     
	<target name="all" depends="config-backup, copy-config, replace-config, replace-variables-in-configuration, copy-war-file, clean-up, substitution" description="Run all the targets">
	</target>
</project>
